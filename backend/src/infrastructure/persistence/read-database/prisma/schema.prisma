generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// Models
model Fleet {
  id            String          @id
  name          String
  joinRequests  JoinRequest[]
  messages      Message[]
  memberships         UserMembership[]
  administrator User           @relation(name: "FleetAdministrators", fields: [administratorId], references: [id])
  administratorId String
  startStation  Station         @relation(fields: [startStationId], references: [id], name: "StartStation")
  startStationId String
  endStation    Station         @relation(fields: [endStationId], references: [id], name: "EndStation")
  endStationId  String
  gatheringTime DateTime
  departureTime DateTime
  genderConstraint GenderConstraint
  isJoinable   Boolean
  status       FleetStatus
  createdAt    DateTime        @default(now())
  linesTaken   Json
  network      UserNetwork?
}

model User {
  id         String  @id
  email      String @unique
  firstName  String?
  lastName   String?
  birthDate  DateTime?
  gender Gender?
  messages   Message[]
  administratedFleets Fleet[] @relation(name: "FleetAdministrators")
  memberships      UserMembership[]
  joinRequests JoinRequest[]
  isOnboarded Boolean
  createdAt   DateTime @default(now())
  network     UserNetwork?
  notificationToken String?
  notificationTokenUpdatedAt DateTime?
}

model OneTimePassword {
  email String @id
  code String
  expiresAt DateTime
  createdAt DateTime @default(now())
  @@index([code])
}

model UserMembership {
  hasConfirmedHisPresence Boolean
  userId String
  fleetId String
  user User @relation(fields: [userId], references: [id])
  fleet Fleet @relation(fields: [fleetId], references: [id])
  createdAt DateTime @default(now())
  @@id([userId, fleetId])
	@@map("UserMembership")
}

model JoinRequest {
  id       String
  status   JoinRequestStatus
  fleetId String
  fleet   Fleet @relation(fields: [fleetId], references: [id], onDelete: Cascade)
  userId  String
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@id([fleetId, userId])
}

model Message {
  id       String @id
  fleetId String
  authorId String
  content  String
  createdAt DateTime @default(now())
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  fleet   Fleet @relation(fields: [fleetId], references: [id], onDelete: Cascade)
}

model Line {
  id   String @id
  externalId String @unique
  name String
  mode TransportMode
  subMode TransportSubMode?
  pictoUrl String
  stations Station[]
  color String
  textColor String
}

model Station {
  id String @id
  externalId String @unique
  name String
  lines Line[]
  fleetsStartingHere Fleet[] @relation(name: "StartStation")
  fleetsEndingHere Fleet[] @relation(name: "EndStation")
  longitude Float
  latitude Float
}

model Event {
  id            Int       @default(autoincrement())
  createdAt     DateTime  @default(now())
  eventType     String
  aggregateId   String
  aggregateType String
  payload        Json

  @@id([id, createdAt])
  @@index([createdAt])
  @@index([eventType])
  @@index([aggregateId, aggregateType])
}

// Enums
enum TransportMode {
  BUS
  RAIL
  METRO
  TRAM
  FUNICULAR
}

enum TransportSubMode {
  REGIONAL_RAIL
  SUBURBAN_RAILWAY
  LOCAL
  RAIL_SHUTTLE
}

enum Gender {
  MALE
  FEMALE
}

enum GenderConstraint {
  MALE_ONLY
  FEMALE_ONLY
  NO_CONSTRAINT
}

enum JoinRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum FleetStatus {
  FORMATION
  GATHERING
  TRAVELING
  ARRIVED
  CANCELLED
}

enum VerificationStatus {
  NOT_STARTED
  PENDING
  VERIFIED
  INVALID
}

enum UserNetwork {
  ETNA
}